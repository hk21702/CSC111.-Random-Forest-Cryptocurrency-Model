import asyncio
from asyncio.coroutines import coroutine
from alpha_vantage.async_support.cryptocurrencies import CryptoCurrencies
from alpha_vantage.async_support.timeseries import TimeSeries
from pandas.core.frame import DataFrame
import pytrends
import pandas as pd
import numpy as np
from concurrent.futures import ProcessPoolExecutor
import os
from datetime import datetime
from enum import Enum, auto

import initialization
from data_classes import WindowArgs, DataSet
from configuration import Config

SAVE_LOCATION = 'cache/data/'

MARKET_SYMBOLS = []
CRYPTO_SYMBOLS = []


class AVDataTypes(Enum):
    """Valid alpha vantage api call types."""
    TimeSeriesDailyAdjusted = auto()
    CryptoCurrenciesDaily = auto()


class UnknownAVType(Exception):
    """Exception raised when trying to handle an unknown type of Alpha Vantage
    API call."""


class RateLimited(Exception):
    """Exception raised when an API call fails because of a rate limit."""


class DuplicateSymbol(Exception):
    """Exception raised when trying to create data package with a duplicate market symbol."""


def load_data(name: str, location: str = SAVE_LOCATION) -> pd.DataFrame:
    """Returns saved pandas dataframe from a feather file with market data"""
    df = pd.read_feather(location + name + '.feather')
    if 'date' in df.columns.values:
        df = df.set_index('date')
    return df


def save_data(name: str, dataframe: pd.DataFrame, location: str = SAVE_LOCATION) -> None:
    """Saves pandas dataframe as a feather file."""
    if dataframe.index.dtype.kind == 'M':
        dataframe = dataframe.reset_index()
    try:
        dataframe.to_feather(location + name + '.feather')
    except FileNotFoundError:
        initialization.create_folder(location)
        dataframe.to_feather(location + name + '.feather')


def delete_data(name: str, location: str = SAVE_LOCATION, extension: str = '.feather') -> None:
    """Deletes a file"""
    os.remove(location + name + extension)


async def get_TS_daily_adjusted(symbol: str, config: Config, cache: bool = True) -> pd.DataFrame:
    """Returns time series data for the given symbol using the Alpha Vantage api in an
    async method."""
    ts = TimeSeries(key=config.get('key', 'ALPHA_VANTAGE'),
                    output_format='pandas')
    try:
        data, _ = await ts.get_daily_adjusted(symbol, outputsize='full')
    except ValueError as e:
        if 'higher API call' in str(e):
            raise RateLimited
        else:
            raise
    idx = pd.date_range(min(data.index), max(data.index))
    data = data.reindex(idx[::-1])
    data['4. close'].fillna(method='backfill', inplace=True)
    data['5. adjusted close'].fillna(method='backfill', inplace=True)
    data['6. volume'].fillna(0.0, inplace=True)
    data['7. dividend amount'].fillna(0.0, inplace=True)
    data.apply(lambda x: x.fillna(data['4. close'], inplace=True)
               if x.name in ['1. open',
                             '2. high',
                             '3. low']
               else x.fillna(1.0, inplace=True))
    data.index.name = 'date'
    data = meta_label_columns(data, symbol)
    if cache:
        save_data(name_generator(
            symbol, AVDataTypes.TimeSeriesDailyAdjusted), data)
    await ts.close()
    return data


async def get_CC_daily(symbol: str, config: Config, market: str = 'USD',
                       sanitize: bool = True, cache: bool = True) -> pd.DataFrame:
    """Returns CryptoCurrency data for the given symbol using the Alpha Vantage api in an
    async method."""
    cc = CryptoCurrencies(key=config.get('key', 'ALPHA_VANTAGE'),
                          output_format='pandas')
    try:
        data, _ = await cc.get_digital_currency_daily(symbol, market)
    except ValueError as e:
        if 'higher API call' in str(e):
            raise RateLimited
        else:
            raise
    if sanitize:
        data.drop(data.loc[datetime.now().date().strftime('%Y%m%d')].index)
        cols = [x for x in data.columns if 'b. ' in x]
        data = data.drop(cols, axis=1)
    data = meta_label_columns(data, symbol)
    if cache:
        save_data(name_generator(
            symbol, AVDataTypes.CryptoCurrenciesDaily), data)
    await cc.close()
    return data


def async_get(tasks: list[coroutine]) -> list[pd.DataFrame]:
    """Async handler for alpha vantage data get calls.
    """
    loop = asyncio.get_event_loop()
    group1 = asyncio.gather(*tasks)
    results = loop.run_until_complete(group1)
    return results


def name_generator(symbol: str, type: AVDataTypes) -> str:
    """Returns autogenerated filename for auto cache save purposes."""
    now = datetime.now().strftime("%y-%d-%m_%H%M%S")
    return '{symbol}_{type}_{time}'.format(symbol=symbol, type=type.name, time=now)


def create_input(window_size: int, dfs: list[pd.DataFrame]) -> pd.DataFrame:
    """"""
    df = pd.concat(dfs, join='inner', axis=1)
    input_windows = DataFrame()
    for win in df.rolling(window_size, axis=1):
        if win.shape[0] == window_size:
            win = win.reset_index(drop=True)
            win.index = win.index + 1
            flat_win = win.stack()
            flat_win.index = flat_win.index.map('{0[1]}_{0[0]}'.format)
            flat_win.to_frame().T
            input_windows = input_windows.append(flat_win, ignore_index=True)
    return input_windows


def create_training_input(window: WindowArgs) -> DataSet:
    """"""
    df = pd.concat(window.data_frames, join='inner', axis=1)
    x_train = DataFrame()
    y_train = DataFrame()
    for win in df.rolling(window.window_size, axis=1):
        if win.shape[0] == window.window_size:
            recent = win.head(1).index
            next = recent + pd.DateOffset(days=window.target_shift)
            if next.values in window.target.index.values:
                win = win.reset_index(drop=True)
                win.index = win.index + 1
                flat_win = win.stack()
                flat_win.index = flat_win.index.map('{0[1]}_{0[0]}'.format)
                flat_win.to_frame().T
                x_train = x_train.append(flat_win, ignore_index=True)
                y_train = y_train.append(
                    window.target.loc[next], ignore_index=True)
    return DataSet(x_train, y_train)


def meta_label_columns(df: pd.DataFrame, name: str) -> pd.DataFrame:
    """Returns pandas DataFrame with renamed columns such that the dataframe
    name is a prefix for all columns."""
    cols = df.columns
    df_new = df.rename(columns={c: f'{name} {c}' for c in cols})
    return df_new


config = Config()
# async_get([get_CC_daily(x, config) for x in ['BTC', 'ETH', 'DOGE']])
# async_get([get_TS_daily_adjusted(x, config)
#          for x in ['GME', 'TSM', 'AMC', 'TSLA']])


# TODO
"""daily percent change, add reddit data for avaliable dates
get reddit data positivity score, get daily search interest"""
